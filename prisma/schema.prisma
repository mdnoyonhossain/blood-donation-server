generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user model
model User {
  id                  String       @id @default(uuid())
  name                String
  email               String       @unique
  password            String
  role                UserRole     @default(USER)
  bloodType           BloodType
  location            String
  availability        Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  userProfile         UserProfile?
  requestsAsDonor     Request[]    @relation("requestsAsDonor")
  requestsAsRequester Request[]    @relation("requestsAsRequester")

  @@map("user")
}

// user profile model
model UserProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  bio              String
  age              Int
  lastDonationDate String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// request model
model Request {
  id              String        @id @default(uuid())
  donorId         String
  requesterId     String
  phoneNumber     String
  dateOfDonation  String
  hospitalName    String
  hospitalAddress String
  reason          String
  requestStatus   RequestStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  donor           User          @relation(fields: [donorId], references: [id], name: "requestsAsDonor")
  requester       User          @relation(fields: [requesterId], references: [id], name: "requestsAsRequester")

  @@map("request")
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  USER
}
